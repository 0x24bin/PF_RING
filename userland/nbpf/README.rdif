nBPF module for Intel RRC
-------------------------

Supported cards: Silicom PE3100G2DQIR (Intel RRC FM10000)

This module allows to set filtering rules directly on the NIC card using the
BFP-like syntax supported by nBPF filters.
As the filter expression complexity affects the ability for translation into 
specific rules for the NIC, we will define a set of constraints and allowed 
expressions.

Usage
-----

This library is part of libpfring, in order to compile libpfring with RRC
filtering support you have to install the librdif library and configure/make
libpfring.

Please make sure you have run rdif daemon running before using this functionality. 

API
---

The API of nBPF module for Intel RRC includes the following functions:

1) int nbpf_rdif_reset(int unit)
   The nbpf_rdif_reset function set the nic card in MON2 mode.
   In MON2 mode every port of the switch is unlinked and no traffic pass between
   the ports.
   Input parameter:
     - "unit" -> intel NIC card indentifier [range from 0 to (MAX_INTEL_DEV - 1)]
   Return value:
     - 0 on failure
     - 1 on success 
   Suggestion: use this function just once (in initialize phase of the NIC card).

2) nbpf_rdif_handle_t *nbpf_rdif_init(char *ifname)
   The nbpf_rdif_init function initializes the switch in order to put the port
   in inline mode:
   port 1 with port 3 for interface 0
   port 2 with port 4 for interface 1
   Input parameter:
     - "ifname" -> Interface name (for example "eth0", "ens9"....)
   Return value:
     - NULL on failure
     - handle pointer on success. Please use the handle with "nbpf_rdif_set_filter"
       and "nbpf_rdif_destroy" functions.

3) int nbpf_rdif_set_filter(nbpf_rdif_handle_t *handle, char *bpf)
   If possible the nbpf_rdif_set_filter transforms the bpf filter in rules for the 
   switch. Not all the bpf filters can be set (please read README.md.
   Input parameter:
     - handle -> data structure that contains the bpf rdif data.
                 This handle is returned from nbpf_rdif_init function.
     - bpf -> bpf filter
   Return value:
     - 0 on failure
     - 1 on success

4) void nbpf_rdif_destroy(nbpf_rdif_handle_t *handle)
   The nbpf_rdif_destroy function removes the dinamic memory of the handle 
   and deletes the rules on the switch for an interface (puts it in inline mode).
   Input parameter:
     - handle -> data structure that contains the bpf rdif data. This handle is returned 
                 from nbpf_rdif_init function. Before exiting, the function frees the
                 dinamic memory.

Pre-Requirements
----------------
Before using nbpf filter, please install rdif deamon and rdifctl application.
Please get "RRC_100G_1R1b" package (owned by Silicom) and run these commands:

cd RRC_100G_1R1b/Linux/Redirect/RD_RRC_Control
tar xzvf rdif-*.tar.gz
cp fm_platform_attributes.cfg rdif-*/driver/
cd rdif-*/
./clean
./install

Then load the fm10k driver:

cd PF_RING/drivers/intel/fm10k/fm10k-0.20.1-zc/src/
$ make
$ ./load_driver.sh 

Now everything is ready to set a bpf filter on the NIC card.

Useful for testing
------------------
You can use some commands to get stats about the packets that match with the rule you have 
set on the switch. 
The Silicom PE3100G2DQIR has two interfaces and two rules groups are set the bpf filter (group 1
for the first one and group 2 for the second one).

Commands:
- "rdifctl query_list 1" return how many rules the bpf filter has set on the switch for group 1 (interface 1)
- "rdifctl query_list 2" return how many rules the bpf filter has set on the switch for group 2 (interface 2)
- "sudo rdifctl rule_stat 1 1" how many packets of group 1 match with the rule 1
- "sudo rdifctl rule_stat 1 2" how many packets of group 1 match with the rule 2
- ect

Tipically when a bpf filter is set you have two rule. For instance for "src host 10.0.0.1" bpf filter you have:

rule 1: permit traffic with src ip 10.0.0.1
rule 2: deny all

